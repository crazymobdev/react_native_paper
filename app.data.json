[[{"title":"Home","name":"index","data":"\nReact Native Paper\n==================\n\nMaterial design for React Native.\n\n## Features\n\n- Follows material design guidelines\n- Works on both iOS and Android\n- Full theming support\n\n## Note\n\nThis project is still a work in progress and lots of components are missing.\n\nCurrently supported React Native version: `>= 0.46.4`\n\n\n","type":"markdown"},{"title":"Getting Started","name":"getting-started","data":"Getting Started\n===============\n\n## Installation\n\nOpen a Terminal in your project's folder and run,\n\n```sh\nnpm install --save react-native-paper react-native-vector-icons\n```\n\nAfter installation, you'll need to link [react-native-vector-icons](https://github.com/oblador/react-native-vector-icons).\n\n\n## Usage\n\nWrap your root component in `Provider` from `react-native-paper`. It's a good idea to wrap the component which is passed to `AppRegistry.registerComponent`.\n\nExample:\n\n```js\nimport React from 'react';\nimport { AppRegistry } from 'react-native';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nfunction Main() {\n  return (\n    <PaperProvider>\n      <App />\n    </PaperProvider>\n  );\n}\n\nAppRegistry.registerComponent('main', () => Main);\n```\n\nThe `PaperProvider` component provides the theme to all the components in the framework. It also acts as a portal to components which need to be rendered at the top level.\n\n\n## Customization\n\nYou can provide a custom theme to customize the colors, fonts etc. with the `Provider` component. Check the [default theme](blob/master/src/styles/DefaultTheme.js) to see what customization options are supported.\n\nExample:\n\n```js\nimport React from 'react';\nimport { AppRegistry } from 'react-native';\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\nimport color from 'color';\nimport App from './src/App';\n\nconst theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: 'tomato',\n    primaryDark: color('tomato').darken(0.2).rgbaString(),\n    accent: 'yellow',\n  },\n};\n\nfunction Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n","type":"markdown"}],[{"title":"Button","name":"button","description":"Buttons communicate the action that will occur when the user touches them\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Button raised onPress={() => console.log('Pressed')>}\n   Press me\n  </Button>\n);\n```","data":{"description":"Buttons communicate the action that will occur when the user touches them\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Button raised onPress={() => console.log('Pressed')>}\n   Press me\n  </Button>\n);\n```","methods":[],"props":{"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the button","flowType":{"name":"boolean"}},"compact":{"type":{"name":"bool"},"required":false,"description":"Use a compact look, useful for flat buttons in a row","flowType":{"name":"boolean"}},"raised":{"type":{"name":"bool"},"required":false,"description":"Add elevation to button, as opposed to default flat appearance","flowType":{"name":"boolean"}},"primary":{"type":{"name":"bool"},"required":false,"description":"Use to primary color from theme","flowType":{"name":"boolean"}},"dark":{"type":{"name":"bool"},"required":false,"description":"Text color of button, a dark button will render light text and vice-versa","flowType":{"name":"boolean"}},"loading":{"type":{"name":"bool"},"required":false,"description":"Whether to show a loading indicator","flowType":{"name":"boolean"}},"icon":{"type":{"name":"union","value":[{"name":"string"},{"name":"shape","value":{"uri":{"name":"string","required":false}}},{"name":"number"}]},"required":false,"description":"Icon name.\nCan be a string (name of MaterialIcon),\nan object {of shape {uri: 'https://path.to'}},\nrequired image from assets (const icon = reqiure('../path/to/image.png')),\nor any valid React-Native Component (e.g. <Image />)","flowType":{"name":"IconSource"}},"color":{"type":{"name":"string"},"required":false,"description":"Custom text color for flat button, or background color for raised button","flowType":{"name":"string"}},"children":{"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}]},"required":false,"description":"Button text","flowType":{"name":"union","raw":"string | Array<string>","elements":[{"name":"string"},{"name":"Array","elements":[{"name":"string"}],"raw":"Array<string>"}]}},"onPress":{"type":{"name":"func"},"required":false,"description":"Function to execute on press","flowType":{"name":"Function"}},"style":{"type":{"name":"custom","raw":"ViewPropTypes.style"},"required":false,"description":"","flowType":{"name":"any"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}}}},"type":"component"},{"title":"Card","name":"card","description":"","data":{"description":"","methods":[],"props":{"elevation":{"type":{"name":"number"},"required":true,"description":"","flowType":{"name":"number"},"defaultValue":{"value":"2","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":"","flowType":{"name":"string"}},"onPress":{"type":{"name":"func"},"required":false,"description":"","flowType":{"name":"Function"}},"style":{"type":{"name":"custom","raw":"ViewPropTypes.style"},"required":false,"description":"","flowType":{"name":"any"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}}}},"type":"component"},{"title":"Checkbox","name":"checkbox","description":"Checkboxes allow the selection of multiple options from a set","data":{"description":"Checkboxes allow the selection of multiple options from a set","methods":[],"props":{"checked":{"type":{"name":"bool"},"required":true,"description":"Whether checkbox is checked","flowType":{"name":"boolean"}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Whether checkbox is disabled","flowType":{"name":"boolean"}},"onPress":{"type":{"name":"func"},"required":false,"description":"Function to execute on press","flowType":{"name":"Function"}},"color":{"type":{"name":"string"},"required":false,"description":"Custom color for checkbox","flowType":{"name":"string"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}}}},"type":"component"},{"title":"index","name":"index","description":"Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n\n```\nexport default class MyComponent extends Component {\n  state = {\n    visible: false,\n  };\n\n  _showDialog = () => this.setState({ visble: true });\n  _hideDialog = () => this.setState({ visble: false });\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <View>\n        <Button onPress={this._showDialog}>Show Dialog</Button>\n        <Dialog\n           visible={visible}\n           onRequestClose={this._hideDialog}\n        >\n          <Dialog.Title>Alert</Dialog.Title>\n          <Dialog.Content>\n            <Paragraph>This is simple dialog</Paragraph>\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={this._hideDialog}>Done</Button>\n          </Dialog.Actions>\n        </Dialog>\n      </View>\n    );\n  }\n}\n```","data":{"description":"Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n\n```\nexport default class MyComponent extends Component {\n  state = {\n    visible: false,\n  };\n\n  _showDialog = () => this.setState({ visble: true });\n  _hideDialog = () => this.setState({ visble: false });\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <View>\n        <Button onPress={this._showDialog}>Show Dialog</Button>\n        <Dialog\n           visible={visible}\n           onRequestClose={this._hideDialog}\n        >\n          <Dialog.Title>Alert</Dialog.Title>\n          <Dialog.Content>\n            <Paragraph>This is simple dialog</Paragraph>\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={this._hideDialog}>Done</Button>\n          </Dialog.Actions>\n        </Dialog>\n      </View>\n    );\n  }\n}\n```","methods":[],"props":{"children":{"type":{"name":"node"},"required":false,"description":"","flowType":{"name":"any"}},"dismissable":{"type":{"name":"bool"},"required":false,"description":"Determines whether clicking outside the dialog dismiss it, true by default","flowType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"onRequestClose":{"type":{"name":"func"},"required":false,"description":"Callback that is called when the user dismisses the dialog","flowType":{"name":"Function"}},"style":{"type":{"name":"object"},"required":false,"description":"","flowType":{"name":"any"}},"visible":{"type":{"name":"bool"},"required":true,"description":"Determines Whether the dialog is visible","flowType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"titleColor":{"defaultValue":{"value":"black","computed":true}}}},"type":"component"},{"title":"Divider","name":"divider","description":"A divider is a thin, lightweight rule that groups content in lists and page layouts","data":{"description":"A divider is a thin, lightweight rule that groups content in lists and page layouts","methods":[],"props":{"inset":{"type":{"name":"bool"},"required":false,"description":"Whether divider has a left inset","flowType":{"name":"boolean"}},"style":{"type":{"name":"custom","raw":"ViewPropTypes.style"},"required":false,"description":"","flowType":{"name":"any"}}}},"type":"component"},{"title":"DrawerItem","name":"draweritem","description":"","data":{"description":"","methods":[],"props":{"color":{"type":{"name":"string"},"required":false,"description":"Custom color for checkbox","flowType":{"name":"string"}},"icon":{"type":{"name":"string"},"required":false,"description":"","flowType":{"name":"IconSource"}},"label":{"type":{"name":"string"},"required":true,"description":"","flowType":{"name":"string"}},"active":{"type":{"name":"bool"},"required":false,"description":"","flowType":{"name":"boolean"}},"onPress":{"type":{"name":"func"},"required":false,"description":"","flowType":{"name":"Function"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}}}},"type":"component"},{"title":"DrawerSection","name":"drawersection","description":"","data":{"description":"","methods":[],"props":{"children":{"type":{"name":"node"},"required":true,"description":"","flowType":{"name":"any"}},"label":{"type":{"name":"string"},"required":false,"description":"","flowType":{"name":"string"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}}}},"type":"component"},{"title":"FAB","name":"fab","description":"A floating action button represents the primary action in an application","data":{"description":"A floating action button represents the primary action in an application","methods":[],"props":{"small":{"type":{"name":"bool"},"required":false,"description":"Whether FAB is mini-sized, used to create visual continuity with other elements","flowType":{"name":"boolean"}},"dark":{"type":{"name":"bool"},"required":false,"description":"Icon color of button, a dark button will render light text and vice-versa","flowType":{"name":"boolean"}},"icon":{"type":{"name":"string"},"required":true,"description":"Name of the icon to show","flowType":{"name":"IconSource"}},"color":{"type":{"name":"string"},"required":false,"description":"Custom color for the icon","flowType":{"name":"string"}},"onPress":{"type":{"name":"func"},"required":false,"description":"Function to execute on press","flowType":{"name":"Function"}},"style":{"type":{"name":"custom","raw":"Paper.propTypes.style"},"required":false,"description":"","flowType":{"name":"any"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}}}},"type":"component"},{"title":"GridView","name":"gridview","description":"","data":{"description":"","methods":[],"props":{"data":{"type":{"name":"array"},"required":true,"description":"Data for the list","flowType":{"name":"Array","elements":[{"name":"any"}],"raw":"Array<any>"}},"spacing":{"type":{"name":"number"},"required":true,"description":"Item's spacing","flowType":{"name":"number"},"defaultValue":{"value":"0","computed":false}},"getNumberOfColumns":{"type":{"name":"func"},"required":true,"description":"Function which determine number of columns.","flowType":{"name":"signature","type":"function","raw":"(width: number) => number","signature":{"arguments":[{"name":"width","type":{"name":"number"}}],"return":{"name":"number"}}},"defaultValue":{"value":"() => 1","computed":false}},"renderItem":{"type":{"name":"func"},"required":true,"description":"Component for rendering item","flowType":{"name":"signature","type":"function","raw":"(item: any) => React$Element<*>","signature":{"arguments":[{"name":"item","type":{"name":"any"}}],"return":{"name":"React$Element","elements":[{"name":"unknown"}],"raw":"React$Element<*>"}}}},"keyExtractor":{"type":{"name":"func"},"required":true,"description":"Function which should return ID base on the item.","flowType":{"name":"signature","type":"function","raw":"(item: any) => string","signature":{"arguments":[{"name":"item","type":{"name":"any"}}],"return":{"name":"string"}}}},"onLayout":{"type":{"name":"func"},"required":false,"description":"","flowType":{"name":"Function"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}},"contentContainerStyle":{"type":{"name":"custom","raw":"ViewPropTypes.style"},"required":true,"description":"","flowType":{"name":"Object","nullable":true}}}},"type":"component"},{"title":"Modal","name":"modal","description":"The Modal component is a simple way to present content above an enclosing view.\n\n```\nexport default class MyComponent extends Component {\n  state = {\n    visible: false,\n  };\n\n  _showModal = () => this.setState({ visble: true });\n  _hideModal = () => this.setState({ visble: false });\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <Modal visible={visible}>\n        <Text>Example Modal</Text>\n      </Modal>\n    );\n  }\n}\n```","data":{"description":"The Modal component is a simple way to present content above an enclosing view.\n\n```\nexport default class MyComponent extends Component {\n  state = {\n    visible: false,\n  };\n\n  _showModal = () => this.setState({ visble: true });\n  _hideModal = () => this.setState({ visble: false });\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <Modal visible={visible}>\n        <Text>Example Modal</Text>\n      </Modal>\n    );\n  }\n}\n```","methods":[],"props":{"children":{"type":{"name":"node"},"required":false,"description":"","flowType":{"name":"any"}},"dismissable":{"type":{"name":"bool"},"required":false,"description":"Determines whether clicking outside the dialog dismiss it, true by default","flowType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"onRequestClose":{"type":{"name":"func"},"required":false,"description":"Callback that is called when the user dismisses the dialog","flowType":{"name":"Function"}},"visible":{"type":{"name":"bool"},"required":true,"description":"Determines Whether the dialog is visible","flowType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}}}},"type":"component"},{"title":"Paper","name":"paper","description":"Paper is a basic container that can give depth to the page.\n\nNote: Pass *elevation* style, to apply shadow to the component. Defaults to 2.","data":{"description":"Paper is a basic container that can give depth to the page.\n\nNote: Pass *elevation* style, to apply shadow to the component. Defaults to 2.","methods":[],"props":{"children":{"type":{"name":"node"},"required":false,"description":"","flowType":{"name":"any"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}},"style":{"type":{"name":"custom","raw":"ViewPropTypes.style"},"required":false,"description":"","flowType":{"name":"any"}}}},"type":"component"},{"title":"ProgressBar","name":"progressbar","description":"Progress bar is an indicator used to present some activity in the app\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <ProgressBar progress={0.5} color={Colors.red800} />\n);\n```","data":{"description":"Progress bar is an indicator used to present some activity in the app\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <ProgressBar progress={0.5} color={Colors.red800} />\n);\n```","methods":[],"props":{"progress":{"type":{"name":"number"},"required":true,"description":"Progress value (between 0 and 1)","flowType":{"name":"number"}},"color":{"type":{"name":"string"},"required":false,"description":"Color of the progress bar","flowType":{"name":"string"}},"style":{"type":{"name":"any"},"required":false,"description":"","flowType":{"name":"any"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}}}},"type":"component"},{"title":"RadioButton","name":"radiobutton","description":"Radio buttons allow the selection of a single option from a set","data":{"description":"Radio buttons allow the selection of a single option from a set","methods":[],"props":{"checked":{"type":{"name":"bool"},"required":true,"description":"Whether radio is checked","flowType":{"name":"boolean"}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Whether radio is disabled","flowType":{"name":"boolean"}},"onPress":{"type":{"name":"func"},"required":false,"description":"Function to execute on press","flowType":{"name":"Function"}},"color":{"type":{"name":"string"},"required":false,"description":"Custom color for radio","flowType":{"name":"string"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}}}},"type":"component"},{"title":"SearchBar","name":"searchbar","description":"SearchBar is a simple input box where users can type search queries","data":{"description":"SearchBar is a simple input box where users can type search queries","methods":[],"props":{"placeholder":{"type":{"name":"string"},"required":false,"description":"Hint text shown when the input is empty","flowType":{"name":"string"}},"value":{"type":{"name":"string"},"required":true,"description":"The value of the text input","flowType":{"name":"string"}},"onChangeText":{"type":{"name":"func"},"required":true,"description":"Callback that is called when the text input's text changes","flowType":{"name":"signature","type":"function","raw":"(query: string) => void","signature":{"arguments":[{"name":"query","type":{"name":"string"}}],"return":{"name":"void"}}}},"onIconPress":{"type":{"name":"func"},"required":false,"description":"Callback to execute if we want the left icon to act as button","flowType":{"name":"Function"}},"icon":{"type":{"name":"string"},"required":false,"description":"Icon name for the left icon button (see onIconPress)","flowType":{"name":"IconSource"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}},"style":{"type":{"name":"custom","raw":"Paper.propTypes.style"},"required":false,"description":"","flowType":{"name":"any"}}}},"type":"component"},{"title":"Switch","name":"switch","description":"Switch is a visual toggle between two mutually exclusive states—on and off","data":{"description":"Switch is a visual toggle between two mutually exclusive states—on and off","methods":[],"props":{"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable toggling the switch","flowType":{"name":"boolean"}},"value":{"type":{"name":"bool"},"required":false,"description":"Switch value- true or false","flowType":{"name":"boolean"}},"onValueChange":{"type":{"name":"func"},"required":false,"description":"Invoked with the new value when the value changes","flowType":{"name":"Function"}},"style":{"type":{"name":"any"},"required":false,"description":"","flowType":{"name":"any"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}},"color":{"type":{"name":"string"},"required":false,"description":"Custom color for checkbox","flowType":{"name":"string"}}}},"type":"component"},{"title":"Toolbar","name":"toolbar","description":"","data":{"description":"","methods":[],"props":{"dark":{"type":{"name":"bool"},"required":false,"description":"Theme color for the whole toolbar, a dark toolbar will render light text and vice-versa\nChild elements can override this prop independently","flowType":{"name":"boolean"}},"children":{"type":{"name":"node"},"required":false,"description":"Toolbar content","flowType":{"name":"any"}},"style":{"type":{"name":"custom","raw":"ViewPropTypes.style"},"required":false,"description":"","flowType":{"name":"any"}},"statusBarHeight":{"type":{"name":"number"},"required":false,"description":"Space added it Toolbar to adapt to the StatusBar","flowType":{"name":"number"},"defaultValue":{"value":"Platform.OS === 'ios' ? 20 : 0","computed":false}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}}}},"type":"component"},{"title":"TouchableRipple","name":"touchableripple","description":"","data":{"description":"","methods":[],"props":{"borderless":{"type":{"name":"bool"},"required":true,"description":"","flowType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"background":{"type":{"name":"object"},"required":false,"description":"","flowType":{"name":"Object"}},"onPress":{"type":{"name":"func"},"required":false,"description":"","flowType":{"name":"Function","nullable":true}},"rippleColor":{"type":{"name":"string"},"required":true,"description":"","flowType":{"name":"string"},"defaultValue":{"value":"'rgba(0, 0, 0, .32)'","computed":false}},"underlayColor":{"type":{"name":"string"},"required":false,"description":"","flowType":{"name":"string"}},"children":{"type":{"name":"element"},"required":false,"description":"","flowType":{"name":"any"}},"style":{"type":{"name":"custom","raw":"ViewPropTypes.style"},"required":false,"description":"","flowType":{"name":"any"}}}},"type":"component"},{"title":"Caption","name":"caption","description":"","data":{"description":"","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Headline","name":"headline","description":"","data":{"description":"","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Paragraph","name":"paragraph","description":"","data":{"description":"","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Subheading","name":"subheading","description":"","data":{"description":"","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Text","name":"text","description":"Text component which follows settings from the theme\n\n@extends Text props https://facebook.github.io/react-native/docs/text.html#props","data":{"description":"Text component which follows settings from the theme\n\n@extends Text props https://facebook.github.io/react-native/docs/text.html#props","methods":[{"name":"setNativeProps","docblock":null,"modifiers":[],"params":[{"name":"...args","type":null}],"returns":null}],"props":{"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}},"style":{"type":{"name":"custom","raw":"NativeText.propTypes.style"},"required":false,"description":"","flowType":{"name":"any"}}}},"type":"component"},{"title":"Title","name":"title","description":"","data":{"description":"","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"}]]