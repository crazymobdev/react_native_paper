[[{"title":"Home","name":"index","data":"\nReact Native Paper\n==================\n\nMaterial design for React Native.\n\n## Features\n\n- Follows material design guidelines\n- Works on both iOS and Android\n- Full theming support\n\n## Note\n\nThis project is still a work in progress and lots of components are missing.\n\nCurrently supported React Native version: `>= 0.46.4`\n\n\n","type":"markdown"},{"title":"Getting Started","name":"getting-started","data":"Getting Started\n===============\n\n## Installation\n\nOpen a Terminal in your project's folder and run,\n\n```sh\nnpm install --save react-native-paper react-native-vector-icons\n```\n\nAfter installation, you'll need to link [react-native-vector-icons](https://github.com/oblador/react-native-vector-icons).\n\n\n## Usage\n\nWrap your root component in `Provider` from `react-native-paper`. It's a good idea to wrap the component which is passed to `AppRegistry.registerComponent`.\n\nExample:\n\n```js\nimport React from 'react';\nimport { AppRegistry } from 'react-native';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nfunction Main() {\n  return (\n    <PaperProvider>\n      <App />\n    </PaperProvider>\n  );\n}\n\nAppRegistry.registerComponent('main', () => Main);\n```\n\nThe `PaperProvider` component provides the theme to all the components in the framework. It also acts as a portal to components which need to be rendered at the top level.\n\n\n## Customization\n\nYou can provide a custom theme to customize the colors, fonts etc. with the `Provider` component. Check the [default theme](blob/master/src/styles/DefaultTheme.js) to see what customization options are supported.\n\nExample:\n\n```js\nimport React from 'react';\nimport { AppRegistry } from 'react-native';\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\nimport color from 'color';\nimport App from './src/App';\n\nconst theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: 'tomato',\n    primaryDark: color('tomato').darken(0.2).rgbaString(),\n    accent: 'yellow',\n  },\n};\n\nfunction Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n","type":"markdown"}],[{"title":"Button","name":"button","description":"Buttons communicate the action that will occur when the user touches them\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Button raised onPress={() => console.log('Pressed')}>\n    Press me\n  </Button>\n);\n```","data":{"description":"Buttons communicate the action that will occur when the user touches them\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Button raised onPress={() => console.log('Pressed')}>\n    Press me\n  </Button>\n);\n```","methods":[],"props":{"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"Disable the button"},"compact":{"flowType":{"name":"boolean"},"required":false,"description":"Use a compact look, useful for flat buttons in a row"},"raised":{"flowType":{"name":"boolean"},"required":false,"description":"Add elevation to button, as opposed to default flat appearance"},"primary":{"flowType":{"name":"boolean"},"required":false,"description":"Use to primary color from theme"},"dark":{"flowType":{"name":"boolean"},"required":false,"description":"Text color of button, a dark button will render light text and vice-versa"},"loading":{"flowType":{"name":"boolean"},"required":false,"description":"Whether to show a loading indicator"},"icon":{"flowType":{"name":"IconSource"},"required":false,"description":"Icon name.\nCan be a string (name of MaterialIcon),\nan object {of shape {uri: 'https://path.to'}},\nrequired image from assets (const icon = reqiure('../path/to/image.png')),\nor any valid React-Native Component (e.g. <Image />)"},"color":{"flowType":{"name":"string"},"required":false,"description":"Custom text color for flat button, or background color for raised button"},"children":{"flowType":{"name":"union","raw":"string | Array<string>","elements":[{"name":"string"},{"name":"Array","elements":[{"name":"string"}],"raw":"Array<string>"}]},"required":false,"description":"Button text"},"onPress":{"flowType":{"name":"Function"},"required":false,"description":"Function to execute on press"},"style":{"flowType":{"name":"any"},"required":false,"description":""},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"Card","name":"card","description":"A card is a sheet of material that serves as an entry point to more detailed information.\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Card>\n    <Card.Content>\n      <Title>Card title</Title>\n      <Paragraph>Card content</Paragraph>\n    </Card.Content>\n    <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n    <Card.Actions>\n      <Button>Cancel</Button>\n      <Button>Ok</Button>\n    <Card.Actions>\n  <Card>\n);\n```","data":{"description":"A card is a sheet of material that serves as an entry point to more detailed information.\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Card>\n    <Card.Content>\n      <Title>Card title</Title>\n      <Paragraph>Card content</Paragraph>\n    </Card.Content>\n    <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n    <Card.Actions>\n      <Button>Cancel</Button>\n      <Button>Ok</Button>\n    <Card.Actions>\n  <Card>\n);\n```","methods":[],"props":{"elevation":{"flowType":{"name":"number"},"required":true,"description":"","defaultValue":{"value":"2","computed":false}},"children":{"flowType":{"name":"string"},"required":false,"description":""},"onPress":{"flowType":{"name":"Function"},"required":false,"description":""},"style":{"flowType":{"name":"any"},"required":false,"description":""},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"Checkbox","name":"checkbox","description":"Checkboxes allow the selection of multiple options from a set\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    checked: false,\n  };\n\n  render() {\n    const { checked } = this.state;\n    return (\n      <Checkbox\n        checked={checked}\n        onPress={() => { this.setState({ checked: !checked }); }}\n      />\n    );\n  }\n}\n```","data":{"description":"Checkboxes allow the selection of multiple options from a set\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    checked: false,\n  };\n\n  render() {\n    const { checked } = this.state;\n    return (\n      <Checkbox\n        checked={checked}\n        onPress={() => { this.setState({ checked: !checked }); }}\n      />\n    );\n  }\n}\n```","methods":[],"props":{"checked":{"flowType":{"name":"boolean"},"required":true,"description":"Whether checkbox is checked"},"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"Whether checkbox is disabled"},"onPress":{"flowType":{"name":"Function"},"required":false,"description":"Function to execute on press"},"color":{"flowType":{"name":"string"},"required":false,"description":"Custom color for checkbox"},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"index","name":"index","description":"Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n\n```\nexport default class MyComponent extends Component {\n  state = {\n    visible: false,\n  };\n\n  _showDialog = () => this.setState({ visble: true });\n  _hideDialog = () => this.setState({ visble: false });\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <View>\n        <Button onPress={this._showDialog}>Show Dialog</Button>\n        <Dialog\n           visible={visible}\n           onRequestClose={this._hideDialog}\n        >\n          <Dialog.Title>Alert</Dialog.Title>\n          <Dialog.Content>\n            <Paragraph>This is simple dialog</Paragraph>\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={this._hideDialog}>Done</Button>\n          </Dialog.Actions>\n        </Dialog>\n      </View>\n    );\n  }\n}\n```","data":{"description":"Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n\n```\nexport default class MyComponent extends Component {\n  state = {\n    visible: false,\n  };\n\n  _showDialog = () => this.setState({ visble: true });\n  _hideDialog = () => this.setState({ visble: false });\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <View>\n        <Button onPress={this._showDialog}>Show Dialog</Button>\n        <Dialog\n           visible={visible}\n           onRequestClose={this._hideDialog}\n        >\n          <Dialog.Title>Alert</Dialog.Title>\n          <Dialog.Content>\n            <Paragraph>This is simple dialog</Paragraph>\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={this._hideDialog}>Done</Button>\n          </Dialog.Actions>\n        </Dialog>\n      </View>\n    );\n  }\n}\n```","methods":[],"props":{"children":{"flowType":{"name":"any"},"required":false,"description":""},"dismissable":{"flowType":{"name":"boolean"},"required":false,"description":"Determines whether clicking outside the dialog dismiss it, true by default","defaultValue":{"value":"true","computed":false}},"onRequestClose":{"flowType":{"name":"Function"},"required":false,"description":"Callback that is called when the user dismisses the dialog"},"style":{"flowType":{"name":"any"},"required":false,"description":""},"visible":{"flowType":{"name":"boolean"},"required":true,"description":"Determines Whether the dialog is visible","defaultValue":{"value":"false","computed":false}},"titleColor":{"defaultValue":{"value":"black","computed":true}}}},"type":"component"},{"title":"Divider","name":"divider","description":"A divider is a thin, lightweight rule that groups content in lists and page layouts\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <View>\n    <Text>Apple</Text>\n    </Divider>\n    <Text>Orange</Text>\n    </Divider>\n  </Button>\n);\n```","data":{"description":"A divider is a thin, lightweight rule that groups content in lists and page layouts\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <View>\n    <Text>Apple</Text>\n    </Divider>\n    <Text>Orange</Text>\n    </Divider>\n  </Button>\n);\n```","methods":[],"props":{"inset":{"flowType":{"name":"boolean"},"required":false,"description":"Whether divider has a left inset"},"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"DrawerItem","name":"draweritem","description":"Item from drawer's list which navigates to speficic location\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <DrawerItem label=\"First Item\" />\n);\n```","data":{"description":"Item from drawer's list which navigates to speficic location\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <DrawerItem label=\"First Item\" />\n);\n```","methods":[],"props":{"color":{"flowType":{"name":"string"},"required":false,"description":"Custom color for checkbox"},"icon":{"flowType":{"name":"IconSource"},"required":false,"description":""},"label":{"flowType":{"name":"string"},"required":true,"description":""},"active":{"flowType":{"name":"boolean"},"required":false,"description":""},"onPress":{"flowType":{"name":"Function"},"required":false,"description":""},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"DrawerSection","name":"drawersection","description":"Drawer container slides in from the left and contains the navigation destinations for your app\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    active: 'First Item',\n  };\n\n  render() {\n    const { active } = this.state;\n    return (\n      <DrawerSection label=\"Subheader\">\n        <DrawerItem\n          label=\"First Item\"\n          active={this.state.active === 'First Item'}\n          onPress={() => { this.setState({ active: 'First Item' }); }}\n       />\n        <DrawerItem\n          label=\"Second Item\"\n          active={this.state.active === 'Second Item'}\n          onPress={() => { this.setState({ active: 'Second Item' }); }}\n       />\n     </DrawerSection>\n    );\n  }\n}\n```","data":{"description":"Drawer container slides in from the left and contains the navigation destinations for your app\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    active: 'First Item',\n  };\n\n  render() {\n    const { active } = this.state;\n    return (\n      <DrawerSection label=\"Subheader\">\n        <DrawerItem\n          label=\"First Item\"\n          active={this.state.active === 'First Item'}\n          onPress={() => { this.setState({ active: 'First Item' }); }}\n       />\n        <DrawerItem\n          label=\"Second Item\"\n          active={this.state.active === 'Second Item'}\n          onPress={() => { this.setState({ active: 'Second Item' }); }}\n       />\n     </DrawerSection>\n    );\n  }\n}\n```","methods":[],"props":{"children":{"flowType":{"name":"any"},"required":true,"description":""},"label":{"flowType":{"name":"string"},"required":false,"description":""},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"FAB","name":"fab","description":"A floating action button represents the primary action in an application\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <FAB\n    small\n    icon=\"add\"\n    onPress={() => {}}\n  />\n);\n```","data":{"description":"A floating action button represents the primary action in an application\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <FAB\n    small\n    icon=\"add\"\n    onPress={() => {}}\n  />\n);\n```","methods":[],"props":{"small":{"flowType":{"name":"boolean"},"required":false,"description":"Whether FAB is mini-sized, used to create visual continuity with other elements"},"dark":{"flowType":{"name":"boolean"},"required":false,"description":"Icon color of button, a dark button will render light text and vice-versa"},"icon":{"flowType":{"name":"IconSource"},"required":true,"description":"Name of the icon to show"},"color":{"flowType":{"name":"string"},"required":false,"description":"Custom color for the icon"},"onPress":{"flowType":{"name":"Function"},"required":false,"description":"Function to execute on press"},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""},"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"GridView","name":"gridview","description":"Grid lists are an alternative to standard list views.\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    items: [],\n  };\n\n  _genRows = () => {\n    const items = this.state.items.slice(0);\n    const itemsLength = items.length;\n\n    if (itemsLength >= 5) {\n      return;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      items.push({ id: itemsLength + i });\n    }\n\n    this.setState({\n      items,\n    });\n  }\n\n  _renderItem = item => {\n    return (\n      <Card>\n        <Text>{item.id}</Text>\n      </Card>\n    );\n  };\n\n  _keyExtractor = item => item.id\n\n  _getNumberOfColumns = (width) => {\n    return Math.floor(width / 160)\n  }\n\n  render() {\n    const { items } = this.state;\n    return (\n      <GridView\n        spacing={40}\n        getNumberOfColumns={this._getNumberOfColumns}\n        data={items}\n        keyExtractor={this._keyExtractor}\n        renderItem={this._renderItem}\n        onEndReached={this._genRows}\n      />\n    );\n  }\n}\n```","data":{"description":"Grid lists are an alternative to standard list views.\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    items: [],\n  };\n\n  _genRows = () => {\n    const items = this.state.items.slice(0);\n    const itemsLength = items.length;\n\n    if (itemsLength >= 5) {\n      return;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      items.push({ id: itemsLength + i });\n    }\n\n    this.setState({\n      items,\n    });\n  }\n\n  _renderItem = item => {\n    return (\n      <Card>\n        <Text>{item.id}</Text>\n      </Card>\n    );\n  };\n\n  _keyExtractor = item => item.id\n\n  _getNumberOfColumns = (width) => {\n    return Math.floor(width / 160)\n  }\n\n  render() {\n    const { items } = this.state;\n    return (\n      <GridView\n        spacing={40}\n        getNumberOfColumns={this._getNumberOfColumns}\n        data={items}\n        keyExtractor={this._keyExtractor}\n        renderItem={this._renderItem}\n        onEndReached={this._genRows}\n      />\n    );\n  }\n}\n```","methods":[],"props":{"spacing":{"flowType":{"name":"number"},"required":true,"description":"Item's spacing","defaultValue":{"value":"0","computed":false}},"getNumberOfColumns":{"flowType":{"name":"signature","type":"function","raw":"(width: number) => number","signature":{"arguments":[{"name":"width","type":{"name":"number"}}],"return":{"name":"number"}}},"required":true,"description":"Function which determine number of columns.","defaultValue":{"value":"() => 1","computed":false}},"data":{"flowType":{"name":"Array","elements":[{"name":"any"}],"raw":"Array<any>"},"required":true,"description":"Data for the list"},"keyExtractor":{"flowType":{"name":"signature","type":"function","raw":"(item: any) => string","signature":{"arguments":[{"name":"item","type":{"name":"any"}}],"return":{"name":"string"}}},"required":true,"description":"Function which should return ID base on the item."},"contentContainerStyle":{"flowType":{"name":"Object","nullable":true},"required":true,"description":""},"renderItem":{"flowType":{"name":"signature","type":"function","raw":"(item: any) => React$Element<*>","signature":{"arguments":[{"name":"item","type":{"name":"any"}}],"return":{"name":"React$Element","elements":[{"name":"unknown"}],"raw":"React$Element<*>"}}},"required":true,"description":"Component for rendering item"},"onLayout":{"flowType":{"name":"Function"},"required":false,"description":""},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"Modal","name":"modal","description":"The Modal component is a simple way to present content above an enclosing view.\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    visible: false,\n  };\n\n  _showModal = () => this.setState({ visble: true });\n  _hideModal = () => this.setState({ visble: false });\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <Modal visible={visible}>\n        <Text>Example Modal</Text>\n      </Modal>\n    );\n  }\n}\n```","data":{"description":"The Modal component is a simple way to present content above an enclosing view.\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    visible: false,\n  };\n\n  _showModal = () => this.setState({ visble: true });\n  _hideModal = () => this.setState({ visble: false });\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <Modal visible={visible}>\n        <Text>Example Modal</Text>\n      </Modal>\n    );\n  }\n}\n```","methods":[],"props":{"children":{"flowType":{"name":"any"},"required":false,"description":""},"dismissable":{"flowType":{"name":"boolean"},"required":false,"description":"Determines whether clicking outside the dialog dismiss it, true by default","defaultValue":{"value":"true","computed":false}},"onRequestClose":{"flowType":{"name":"Function"},"required":false,"description":"Callback that is called when the user dismisses the dialog"},"visible":{"flowType":{"name":"boolean"},"required":true,"description":"Determines Whether the dialog is visible","defaultValue":{"value":"false","computed":false}}}},"type":"component"},{"title":"Paper","name":"paper","description":"Paper is a basic container that can give depth to the page.\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Paper style={styles.paper}>\n     <Text>Paper</Text>\n  </Paper>\n);\n\n\nconst styles = StyleSheet.create({\n  paper: {\n   padding: 8,\n   height: 80,\n   width: 80,\n   alignItems: 'center',\n   justifyContent: 'center',\n   },\n});\n```\nNote: Pass *elevation* style, to apply shadow to the component. Defaults to 2.","data":{"description":"Paper is a basic container that can give depth to the page.\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Paper style={styles.paper}>\n     <Text>Paper</Text>\n  </Paper>\n);\n\n\nconst styles = StyleSheet.create({\n  paper: {\n   padding: 8,\n   height: 80,\n   width: 80,\n   alignItems: 'center',\n   justifyContent: 'center',\n   },\n});\n```\nNote: Pass *elevation* style, to apply shadow to the component. Defaults to 2.","methods":[],"props":{"children":{"type":{"name":"node"},"required":false,"description":"","flowType":{"name":"any"}},"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}},"style":{"type":{"name":"custom","raw":"ViewPropTypes.style"},"required":false,"description":"","flowType":{"name":"any"}}}},"type":"component"},{"title":"ProgressBar","name":"progressbar","description":"Progress bar is an indicator used to present some activity in the app\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <ProgressBar progress={0.5} color={Colors.red800} />\n);\n```","data":{"description":"Progress bar is an indicator used to present some activity in the app\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <ProgressBar progress={0.5} color={Colors.red800} />\n);\n```","methods":[],"props":{"progress":{"flowType":{"name":"number"},"required":true,"description":"Progress value (between 0 and 1)"},"color":{"flowType":{"name":"string"},"required":false,"description":"Color of the progress bar"},"style":{"flowType":{"name":"any"},"required":false,"description":""},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"RadioButton","name":"radiobutton","description":"Radio buttons allow the selection of a single option from a set\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    checked: 'firstOption',\n  };\n\n  render() {\n    const { checked } = this.state;\n    return (\n      <View>\n        <RadioButton\n          value='firstOption'\n          checked={checked === 'firstOption'}\n          onPress={() => { this.setState({ checked: 'firstOption' }); }}\n        />\n        <RadioButton\n          value='secondOption'\n          checked={checked === 'secondOption'}\n          onPress={() => { this.setState({ checked: 'secondOption' }); }}\n        />\n      </View>\n    );\n  }\n}\n```","data":{"description":"Radio buttons allow the selection of a single option from a set\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    checked: 'firstOption',\n  };\n\n  render() {\n    const { checked } = this.state;\n    return (\n      <View>\n        <RadioButton\n          value='firstOption'\n          checked={checked === 'firstOption'}\n          onPress={() => { this.setState({ checked: 'firstOption' }); }}\n        />\n        <RadioButton\n          value='secondOption'\n          checked={checked === 'secondOption'}\n          onPress={() => { this.setState({ checked: 'secondOption' }); }}\n        />\n      </View>\n    );\n  }\n}\n```","methods":[],"props":{"checked":{"flowType":{"name":"boolean"},"required":true,"description":"Whether radio is checked"},"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"Whether radio is disabled"},"onPress":{"flowType":{"name":"Function"},"required":false,"description":"Function to execute on press"},"color":{"flowType":{"name":"string"},"required":false,"description":"Custom color for radio"},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"SearchBar","name":"searchbar","description":"SearchBar is a simple input box where users can type search queries\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    firstQuery: '',\n  };\n\n  render() {\n    const { firstQuery } = this.state;\n    return (\n      <SearchBar\n        placeholder=\"Search\"\n        onChangeText={query => { this.setState({ firstQuery: query }); }}\n        value={firstQuery}\n      />\n    );\n  }\n}\n```","data":{"description":"SearchBar is a simple input box where users can type search queries\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    firstQuery: '',\n  };\n\n  render() {\n    const { firstQuery } = this.state;\n    return (\n      <SearchBar\n        placeholder=\"Search\"\n        onChangeText={query => { this.setState({ firstQuery: query }); }}\n        value={firstQuery}\n      />\n    );\n  }\n}\n```","methods":[],"props":{"placeholder":{"flowType":{"name":"string"},"required":false,"description":"Hint text shown when the input is empty"},"icon":{"flowType":{"name":"IconSource"},"required":false,"description":"Icon name for the left icon button (see onIconPress)"},"value":{"flowType":{"name":"string"},"required":true,"description":"The value of the text input"},"onChangeText":{"flowType":{"name":"signature","type":"function","raw":"(query: string) => void","signature":{"arguments":[{"name":"query","type":{"name":"string"}}],"return":{"name":"void"}}},"required":true,"description":"Callback that is called when the text input's text changes"},"onIconPress":{"flowType":{"name":"Function"},"required":false,"description":"Callback to execute if we want the left icon to act as button"},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""},"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Switch","name":"switch","description":"Switch is a visual toggle between two mutually exclusive states—on and off\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    isSwitchOn: false,\n  };\n\n  render() {\n    const { isSwitchOn } = this.state;\n    return (\n      <Switch\n        value={isSwitchOn}\n        onValueChange={() =>\n          { this.setState({ isSwitchOn: !isSwitchOn }); }\n        }\n      />\n    );\n  }\n}\n```","data":{"description":"Switch is a visual toggle between two mutually exclusive states—on and off\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    isSwitchOn: false,\n  };\n\n  render() {\n    const { isSwitchOn } = this.state;\n    return (\n      <Switch\n        value={isSwitchOn}\n        onValueChange={() =>\n          { this.setState({ isSwitchOn: !isSwitchOn }); }\n        }\n      />\n    );\n  }\n}\n```","methods":[],"props":{"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"Disable toggling the switch"},"value":{"flowType":{"name":"boolean"},"required":false,"description":"Switch value- true or false"},"color":{"flowType":{"name":"string"},"required":false,"description":"Custom color for checkbox"},"onValueChange":{"flowType":{"name":"Function"},"required":false,"description":"Invoked with the new value when the value changes"},"style":{"flowType":{"name":"any"},"required":false,"description":""},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"TextInput","name":"textinput","description":"TextInputs allow users to input text.\n\n**Usage:**\n```\nclass MyComponent extends React.Component {\n  state = {\n    text: ''\n  };\n\n  render(){\n    return (\n      <TextInput\n        label='Email'\n        value={this.state.text}\n        onChangeText={text => this.setState({ text })}\n      />\n    );\n  }\n}\n```\n\n@extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props","data":{"description":"TextInputs allow users to input text.\n\n**Usage:**\n```\nclass MyComponent extends React.Component {\n  state = {\n    text: ''\n  };\n\n  render(){\n    return (\n      <TextInput\n        label='Email'\n        value={this.state.text}\n        onChangeText={text => this.setState({ text })}\n      />\n    );\n  }\n}\n```\n\n@extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props","methods":[{"name":"setNativeProps","docblock":null,"modifiers":[],"params":[{"name":"...args","type":null}],"returns":null},{"name":"isFocused","docblock":null,"modifiers":[],"params":[{"name":"...args","type":null}],"returns":null},{"name":"clear","docblock":null,"modifiers":[],"params":[{"name":"...args","type":null}],"returns":null},{"name":"focus","docblock":null,"modifiers":[],"params":[{"name":"...args","type":null}],"returns":null},{"name":"blur","docblock":null,"modifiers":[],"params":[{"name":"...args","type":null}],"returns":null}],"props":{"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"If true, user won't be able to interact with the component. The default value is false","defaultValue":{"value":"false","computed":false}},"label":{"flowType":{"name":"string"},"required":false,"description":"The text to use for the floating label"},"placeholder":{"flowType":{"name":"string"},"required":false,"description":"Placeholder for the input"},"onChangeText":{"flowType":{"name":"Function"},"required":false,"description":"Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler"},"underlineColor":{"flowType":{"name":"string"},"required":false,"description":"Underline color of the input"},"multiline":{"flowType":{"name":"boolean"},"required":true,"description":"Whether the input can have multiple lines"},"numberOfLines":{"flowType":{"name":"number"},"required":true,"description":"The number of lines to show in the input (Android only)"},"onFocus":{"flowType":{"name":"Function"},"required":false,"description":"Callback that is called when the text input is focused"},"onBlur":{"flowType":{"name":"Function"},"required":false,"description":"Callback that is called when the text input is blurred"},"value":{"flowType":{"name":"string"},"required":false,"description":"Value of the text input"},"style":{"flowType":{"name":"any"},"required":false,"description":""},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"Toolbar","name":"toolbar","description":"Toolbar is a generalization of action bars for use within application layouts.\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    showLeftIcon: true,\n    showSearchIcon: true,\n    showMoreIcon: true,\n    showSubtitle: true,\n  };\n\n  render() {\n    const { showLeftIcon, showSearchIcon, showMoreIcon, showSubtitle } = this.state;\n    return (\n      <Toolbar>\n        {showLeftIcon && (\n          <Toolbar.BackAction\n            onPress={() => {}}\n          />\n        )}\n        <Toolbar.Content\n          title=\"Title\"\n          subtitle={showSubtitle ? 'Subtitle' : null}\n        />\n        {showSearchIcon && (\n          <Toolbar.Action icon=\"search\" onPress={() => {}} />\n        )}\n        {showMoreIcon && (\n          <Toolbar.Action icon=\"more-horiz\" onPress={() => {}} />\n        )}\n      <Toolbar>\n    );\n  }\n}\n```","data":{"description":"Toolbar is a generalization of action bars for use within application layouts.\n\n**Usage:**\n```\nexport default class MyComponent extends Component {\n  state = {\n    showLeftIcon: true,\n    showSearchIcon: true,\n    showMoreIcon: true,\n    showSubtitle: true,\n  };\n\n  render() {\n    const { showLeftIcon, showSearchIcon, showMoreIcon, showSubtitle } = this.state;\n    return (\n      <Toolbar>\n        {showLeftIcon && (\n          <Toolbar.BackAction\n            onPress={() => {}}\n          />\n        )}\n        <Toolbar.Content\n          title=\"Title\"\n          subtitle={showSubtitle ? 'Subtitle' : null}\n        />\n        {showSearchIcon && (\n          <Toolbar.Action icon=\"search\" onPress={() => {}} />\n        )}\n        {showMoreIcon && (\n          <Toolbar.Action icon=\"more-horiz\" onPress={() => {}} />\n        )}\n      <Toolbar>\n    );\n  }\n}\n```","methods":[],"props":{"dark":{"flowType":{"name":"boolean"},"required":false,"description":"Theme color for the whole toolbar, a dark toolbar will render light text and vice-versa\nChild elements can override this prop independently"},"children":{"flowType":{"name":"any"},"required":false,"description":"Toolbar content"},"style":{"flowType":{"name":"any"},"required":false,"description":""},"statusBarHeight":{"flowType":{"name":"number"},"required":false,"description":"Space added it Toolbar to adapt to the StatusBar","defaultValue":{"value":"Platform.OS === 'ios' ? 20 : 0","computed":false}},"theme":{"flowType":{"name":"Theme"},"required":true,"description":""}}},"type":"component"},{"title":"TouchableRipple","name":"touchableripple","description":"Ripple provides components with a material \"ink ripple\" interaction effect\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <TouchableRipple>\n    onPress={() => {}}\n    borderless\n    rippleColor=\"rgba(0, 0, 0, .32)\"\n  >\n    <View>\n      <Paragraph>Press me</Paragrpah>\n    </View>\n  </TouchableRipple>\n);\n```","data":{"description":"Ripple provides components with a material \"ink ripple\" interaction effect\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <TouchableRipple>\n    onPress={() => {}}\n    borderless\n    rippleColor=\"rgba(0, 0, 0, .32)\"\n  >\n    <View>\n      <Paragraph>Press me</Paragrpah>\n    </View>\n  </TouchableRipple>\n);\n```","methods":[],"props":{"borderless":{"flowType":{"name":"boolean"},"required":true,"description":"","defaultValue":{"value":"false","computed":false}},"background":{"flowType":{"name":"Object"},"required":false,"description":""},"onPress":{"flowType":{"name":"Function","nullable":true},"required":false,"description":""},"rippleColor":{"flowType":{"name":"string"},"required":true,"description":"","defaultValue":{"value":"'rgba(0, 0, 0, .32)'","computed":false}},"underlayColor":{"flowType":{"name":"string"},"required":false,"description":""},"children":{"flowType":{"name":"any"},"required":false,"description":""},"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Caption","name":"caption","description":"Caption - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Caption>Caption</Caption>\n);\n```","data":{"description":"Caption - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Caption>Caption</Caption>\n);\n```","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Headline","name":"headline","description":"Headline - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Headline>Headline</Headline>\n);\n```","data":{"description":"Headline - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Headline>Headline</Headline>\n);\n```","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Paragraph","name":"paragraph","description":"Paragraph - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Paragraph>Paragraph</Paragraph>\n);\n```","data":{"description":"Paragraph - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Paragraph>Paragraph</Paragraph>\n);\n```","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Subheading","name":"subheading","description":"Subheading - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Subheading>Subheading</Subheading>\n);\n```","data":{"description":"Subheading - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Subheading>Subheading</Subheading>\n);\n```","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"},{"title":"Text","name":"text","description":"Text component which follows settings from the theme\n\n@extends Text props https://facebook.github.io/react-native/docs/text.html#props","data":{"description":"Text component which follows settings from the theme\n\n@extends Text props https://facebook.github.io/react-native/docs/text.html#props","methods":[{"name":"setNativeProps","docblock":null,"modifiers":[],"params":[{"name":"...args","type":null}],"returns":null}],"props":{"theme":{"type":{"name":"object"},"required":true,"description":"","flowType":{"name":"Theme"}},"style":{"type":{"name":"custom","raw":"NativeText.propTypes.style"},"required":false,"description":"","flowType":{"name":"any"}}}},"type":"component"},{"title":"Title","name":"title","description":"Title - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Title>Title</Title>\n);\n```","data":{"description":"Title - typography style\n\n**Usage:**\n```\nconst MyComponent = () => (\n  <Title>Title</Title>\n);\n```","methods":[],"props":{"style":{"flowType":{"name":"any"},"required":false,"description":""}}},"type":"component"}]]